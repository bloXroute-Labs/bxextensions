version: 2.1
commands:
  clone:
    description: "checkout a git repository"
    parameters:
      repo:
        type: string
      folder:
        type: string
    steps:
      - run:
          name: clone repository
          command: |
            if [ -d "<< parameters.folder >>" ]; then
              echo "folder already exist skipping << parameters.folder >>"
            else
              { # try
                  echo "Trying to clone identical branch name '$CIRCLE_BRANCH' from << parameters.repo >>."
                  git clone -b $CIRCLE_BRANCH --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/<< parameters.repo >>.git << parameters.folder >>
              } || { # catch
                  echo "Trying bxextensions develop branch, could not find identical branch name '$CIRCLE_BRANCH'."
                  git clone -b develop --single-branch --depth=1 --recursive git@github.com:bloXroute-Labs/<< parameters.repo >>.git << parameters.folder >>
              }
              cd << parameters.folder >>
              echo "Resolved branch $(git rev-parse --abbrev-ref HEAD) for << parameters.folder >>."
              echo "$(git rev-parse HEAD)" > ~/ws/<< parameters.folder >>_tmp_file
            fi
  build-extensions-for-os:
    description: "build extensions for provided os "
    parameters:
      os:
        type: string
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/ws
      - checkout:
          path:
            bxextensions
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1 \
              build-base musl automake autoconf libtool openssl-dev cmake
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - bxextensions-build-cache-{{ .Branch }}-<< parameters.os >>
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build bxextensions Docker image (<< parameters.os >>)
          command: |
            cd ~/ws/bxextensions
            mkdir build/<< parameters.os >>
            docker build -f Dockerfile-<< parameters.os >> --cache-from=app --build-arg UID=$(id -u) --build-arg GID=$(id -g) . -t app
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: bxextensions-build-cache-{{ .Branch }}-<< parameters.os >>
          paths:
            - /caches/app.tar
executors:
  bloxroute-executor:
    docker:
      - image: circleci/python:3.8
    environment:
      PYTHONPATH: /home/circleci/ws/bxcommon/src:/home/circleci/ws/bxextensions:/home/circleci/ws/bxcommon-internal/src/
      GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
    working_directory: ~/ws
jobs:
  initialize:
    executor: bloxroute-executor
    working_directory: ~/ws
    steps:
      - attach_workspace:
          at: ~/ws
      - clone:
          repo: bxextensions-private
          folder: bxextensions
      - run: # install and activate virtual environment with pip
          name: setup
          command: |
            sudo apt -y update
            sudo apt -y install build-essential automake autogen autoconf libtool libtool-bin libssl-dev cmake linux-headers-amd64
            python -m virtualenv venv
            . venv/bin/activate
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - bxextensions
      - restore_cache:
          key: bxextensions-build-{{ checksum "~/ws/bxextensions_tmp_file" }}
      - run:
          name: Install bxextensions
          command: |
            cd ~/ws
            . venv/bin/activate
            cd bxextensions
            python build_extensions.py --run-tests False
      - save_cache:
          key: bxextensions-build-{{ checksum "~/ws/bxextensions_tmp_file" }}
          paths:
            - "bxextensions/build"
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - bxextensions
  test:
    executor: bloxroute-executor
    working_directory: ~/ws
    steps:
      - attach_workspace:
          at: ~/ws
      - run:
          name: Unit tests
          command: |
            cd ~/ws
            . venv/bin/activate
            cd bxextensions
            python run_tests.py
      - store_artifacts:
          path: test-reports/
          destination: tr1
  e2e:
    executor: bloxroute-executor
    working_directory: ~/ws
    steps:
      - attach_workspace:
          at: ~/ws
      - clone:
          repo: bxe2e
          folder: bxe2e
      - clone:
          repo: bxcommon-private
          folder: bxcommon
      - clone:
          repo: bxcommon-internal
          folder: bxcommon-internal
      - clone:
          repo: bxrelay
          folder: bxrelay
      - clone:
          repo: bxgateway-private
          folder: bxgateway
      - restore_cache: # restores saved dependency cache
          key: "bxcommon-{{ checksum \"bxcommon/requirements.txt\" }}-\
            {{ checksum \"bxcommon/requirements-dev.txt\" }}-\
            {{ checksum \"bxcommon/requirements-optional.txt\" }}"
      - run:
          name: Initialize virtualenv
          command: |
            . venv/bin/activate
            pip install -r bxcommon/requirements.txt \
              -r bxcommon/requirements-dev.txt \
              -r bxcommon/requirements-optional.txt \
              -r bxrelay/requirements.txt \
              -r bxrelay/requirements-dev.txt \
              -r bxgateway/requirements.txt \
              -r bxgateway/requirements-dev.txt \
              -r bxe2e/scripts/requirements.txt
      - run:
          name: Integration Test
          command: |
            . venv/bin/activate
            cd bxe2e/test/integration
            PYTHONPATH=$PYTHONPATH:/home/circleci/ws/bxe2e/src:/home/circleci/ws/bxgateway/src:/home/circleci/ws/bxrelay/src:/home/circleci/ws/bxcommon/src:/home/circleci/ws/bxcommon-internal/src/
            python -m unittest discover --verbose
  build-extensions-alpine:
    executor: bloxroute-executor
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - build-extensions-for-os:
          os: alpine-3.11
  build-extensions-centos:
    docker:
      - image: docker:17.05.0-ce-git
    executor: bloxroute-executor
    steps:
      - build-extensions-for-os:
          os: centos-7
  build-extensions-ubuntu:
    docker:
      - image: docker:17.05.0-ce-git
    executor: bloxroute-executor
    steps:
      - build-extensions-for-os:
          os: ubuntu-18.04
  deploy:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/ws

    steps:
      - checkout
      - attach_workspace:
          at: ~/ws
      - run:
          name: Package
          command: 'echo "Yay deploy!"'
  build:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/ws
    steps:
      - checkout
      - attach_workspace:
          at: ~/ws
      - run:
          name: Package
          command: 'echo "Yay build!"'
workflows:
  version: 2
  test-build:
    jobs:
      - initialize
      - build:
          requires:
           - initialize
      - test:
          requires:
            - initialize
      - e2e:
          requires:
            - initialize
      - build-extensions-alpine:
          requires:
            - initialize
            - test
          filters:
            branches:
              only: develop
      - build-extensions-centos:
          requires:
            - initialize
            - test
          filters:
            branches:
              only: develop
      - build-extensions-ubuntu:
          requires:
            - initialize
            - test
          filters:
            branches:
              only: develop
      - deploy:
          filters:
            branches:
              only: develop
          requires:
            - initialize
